#! /usr/bin/python
#coding:utf-8

'''prototype of vulnerability'''
if __name__ == "__main__":
    import sys,os
    sys.path.append(os.path.abspath("../"))

from modules.script_tools import *

class VRL_Vulnerability():

    def frame_check(self):
        '''return 0 if frame_check failed'''
        if not hasattr(self, 'run') :
            print '[Error]: The vulnerability does not have a run function, stop checking.'
            return 0
        if not hasattr(self, 'exploit'): print 'Warning: The vulnerability does not have supported exploits.'
        if not hasattr(self, 'options'):
            print '[Error]: The exploit does not have options!'
            return 0
        print 'Check Finished!'
        return 1

    def frame_print_info(self):
        if hasattr(self, 'info'):
            print_line('Vulnerability inFormation:')
            print self.info
        else:
            print colorize('[Error]: ', 'red'), 'This vulnerability has no info.'

    @staticmethod
    def frame_load(name, root_path):
        module_path = 'vulnerabilities.'+name+'.run'
        try:
            _temp = __import__(module_path, globals(), locals(), fromlist=['Vulnerability'])
            Vulnerability = _temp.Vulnerability
            vul = Vulnerability()
            print 'Vulnerability Loaded.'
            vul.frame_path = root_path + r'/vulnerabilities/' + name + r'/'
            vul.frame_print_info()
            if hasattr(vul, 'exploit') and vul.exploit:
                print_line('Supported Exploits:')
                if type(vul.exploit) == str:
                    print vul.exploit
                elif type(vul.exploit) == list:
                    for i in vul.exploit:
                        print i
                print_line('')
            return vul

        except Exception, e:
            print colorize('[Error]: ', 'red'), e
            return None

    def frame_set(self, dict):
        updated = False
        for (k, v) in dict.items():
            if k in self.options.keys():
                self.options[k] = v
                updated = True
        return updated



if __name__=='__main__':
    print 'Prototype of vulnerability, read documents for more information.'
