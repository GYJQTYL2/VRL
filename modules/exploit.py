#! /usr/bin/python
#coding:utf-8

'''prototype of exploit'''

class VRL_Exploit():

    def check(self):
        '''return 0 if check failed'''
        import os, sys, json
        if 'VRL.py' not in [str(i) for i in os.listdir(sys.path[0])]:
            os.chdir(r'../../')

        if not hasattr(self, 'run') :
            print '[Error]: The exploit does not have a run function!.'
            return 0
        if not hasattr(self, 'vulnerability'):
            print 'Warning: The exploit does not have a default target vulnerability.'
        if not hasattr(self, 'options'):
            print '[Error]: The exploit does not have options!'
            return 0
        if not hasattr(self, 'default_payload'):
            print 'Warning: The exploit can not change payload.'
        else:
            self.payload=''
            print ">Exploit has a default payload, loading..."
            if self.default_payload + '.json' in str(os.listdir('./payloads')):
                try:
                    with open('./payloads/' + self.default_payload + '.json', 'r') as f:
                        json_data = json.load(f)
                        class _tmp_pay(object):
                            info = ''
                            data = ''
                        pay = _tmp_pay()
                        pay.data = eval("str('" + json_data['data'] + "')")  # This is unsafe, and ugly.
                        print pay.info  # who can tell me a better way? by author
                        self.payload = pay.data
                        print ">Default payload: '" + self.default_payload+ "' loaded."
                except Exception, e:
                    print '[Error]: ', e
                    return 0

            # try .py
            else:
                try:
                    _temp = __import__('payloads.' + self.default_payload, globals(), locals(),
                                       fromlist=['Payload'])
                    Payload = _temp.Payload
                    pay = Payload()
                    self.payload = pay.data
                    print ">Default payload: '" + self.default_payload+ "' loaded."
                except Exception, e:
                    print '[Error]: ', e
                    return 0

            if not hasattr(self, 'supported_payload') :
                print 'Warring: The exploit support changing payload but has no supported_payload.'
            if not hasattr(self, 'payload_requirement') :
                print 'Warring: The exploit support changing payload but has no payload_requirement information.'
        print 'Check Finished!'
        return 1

if __name__=='__main__':
    print 'Prototype of exploit, read documents for more information.\n'
