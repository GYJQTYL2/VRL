#! /usr/bin/python
#coding:utf-8
import os
import sys
sys.path.append(os.path.abspath("../.."))
from modules import exploit

class Exploit(exploit.VRL_Exploit):
#这里之上不要更改，除了增加import------------------------------------------------------------------------
    def __init__(self):
        '''Add information of your exploit here'''
        #这一名字要与文件夹名称一致
        self.name = 'exploit_name'
        #这里的信息用于使用这一exploit显示给用户的信息。这里的名字可以写全称。格式请保持这种风格。尽量详尽。
        self.info =\
'''Exploit Name : XXX
Exploit abstract : XXX
Author : XXX
Support change payload : True
'''
        #这里包括用户可以设置的所有选项和默认值。注意必须为字符串形式，取值时用eval函数。
        #这里与vulnerability中相同key的值将被同步到vulnerability中。
        self.options = {'dIP' : '127.0.0.1',
                      'port' : '12345',
                      'aslr' : 'False'}
        #这里写出支持的漏洞程序名称，以路径名为准。如有多个可以写为list。
        self.vulnerability = 'Supported Vulnerability Name'
        #如果不支持更换payload，那么下列属性可以删除。
        #这里指定默认的payload名称，必须在VRL中存在。
        self.default_payload = 'payload_name'
        #这里写出建议（已测试）的payload名称，以路径名为准。如有多个可以写为list。
        self.supported_payload = ['payload1', 'payload2']
        #这里写出更换payload时的要求（用于用户更换你指定以外的payload参考），尽量详尽。
        self.payload_requirement = \
'''architecture : x86
max length : 200
NULL byte : allow
'''
        #这一属性可以删除，因为它会被覆盖，这里只是提示你如何调用payload内容，载入payload由VRL帮你完成。
        self.payload = '\xAA'

    def run(self):
        '''在这里运行你的攻击，你可以单独运行这一脚本，会自动帮你运行攻击。如果这里运行成功，那么VRL就可以调用你的脚本了。
        确保你运行的时候符合options中的设置。
        下面是一个简单的样例。'''
        import socket
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.connect((self.options['dIP'], int(self.options['port'])))
        data = 'A' * 100 + self.payload
        s.send(data)
        s.close()
        print "Exploit Finished."

#这里之下不要更改---------------------------------------------------------------------------------
if __name__ == "__main__":
    if '__init__.py' not in os.listdir(os.curdir):
        os.mknod('__init__.py')
    exp = Exploit()
    print 'Exploit: ',exp.name,' \n'
    print 'Checking:\n'
    if exp.check():
        print 'Running:\n'
        exp.run()

