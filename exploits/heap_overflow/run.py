#! /usr/bin/python
#coding:utf-8
import os
import sys
sys.path.append(os.path.abspath("../.."))
from modules import exploit
sys.path.append("../..")
from modules.script_tools import *

class Exploit(exploit.VRL_Exploit):
#这里之上不要更改，除了增加import------------------------------------------------------------------------
    def __init__(self):
        '''Add information of your exploit here'''
        #这一名字要与文件夹名称一致
        self.name = 'heap_overflow'
        #这里的信息用于使用这一exploit显示给用户的信息。这里的名字可以写全称。格式请保持这种风格。尽量详尽。
        self.info =\
'''Exploit Name : heap_overflow
Exploit abstract: heap overflow
Author : guoyingjie
Support change payload : False
Environment : ASLR on; DEP on; PIE off; Architecture: amd64.
'''
        #这里包括用户可以设置的所有选项和默认值。注意必须为字符串形式，取值时用eval函数。
        #这里与vulnerability中相同key的值将被同步到vulnerability中。
        self.options = {'dIP' : '127.0.0.1',
                        'port' : '12345',
                        'architecture' : 'amd64',
                        'static' : 'False',
                        'wait' : 'False'}
        #这里写出支持的漏洞程序名称，以路径名为准。如有多个可以写为list。
        self.vulnerability = 'heap'

    def run(self):
        '''在这里运行你的攻击，你可以单独运行这一脚本，会自动帮你运行攻击。如果这里运行成功，那么VRL就可以调用你的脚本了。
        确保你运行的时候符合options中的设置。
        下面是一个简单的样例。'''
        if self.options['architecture'] == 'amd64':
            if self.options['static'] == 'False':
                file_name = 'heap_overflow.py'
            else:
                file_name = 'heap_overflow_static.py'
        else:
            print 'Unrecognized architecture, stop.'
            return
        clear_share()
        for (k,v) in self.options.items():
            share(k,v)
        os.system(new_terminal("python ./"+file_name))

#这里之下不要更改---------------------------------------------------------------------------------
if __name__ == "__main__":
    if '__init__.py' not in os.listdir(os.curdir):
        os.mknod('__init__.py')
    exp = Exploit()
    print 'Exploit: ',exp.name,' \n'
    print 'Checking:\n'
    if exp.check():
        print 'Running:\n'
        exp.run()

